{"version":3,"sources":["Home/WeatherContainer/WeatherCard/icons/clear.svg","Header/logo.svg","Home/WeatherContainer/WeatherCard/icons/clouds.svg","Home/WeatherContainer/WeatherCard/icons/rain.svg","Home/WeatherContainer/WeatherCard/icons/snow.svg","serviceWorker.js","Header/Header.js","Home/SearchContainer/SearchContainer.js","Home/WeatherContainer/WeatherCard/WeatherCard.js","Home/WeatherContainer/WeatherContainer.js","Footer/Footer.js","Home/Home.js","About/About.js","Contact/Contact.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Header","Navbar","className","expand","Brand","href","process","src","logo","alt","width","height","Text","Toggle","aria-controls","Collapse","id","Nav","Link","GENRES","SearchContainer","setGenre","setUserInput","handleSubmit","Form","onSubmit","event","Group","Label","Control","as","onChange","target","value","map","genre","key","InputGroup","type","placeholder","Append","onClick","icon","faSearch","WeatherCard","props","Card","Title","Date","data","dt","getDay","weather","main","toLowerCase","clear","clouds","rain","snow","getIcon","Math","round","temp","max","min","Accordion","Button","variant","eventKey","faAngleDown","WeatherContainer","city","CardGroup","daily","slice","day","Body","Footer","sticky","rel","faGithub","color","Home","useState","setCity","userInput","weatherData","setWeatherData","loading","setLoading","getApiData","getWeatherData","a","url","fetch","then","response","ok","json","catch","error","console","log","preventDefault","Spinner","animation","About","Contact","ReactDOM","render","basename","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.762f91ea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/clear.bea32658.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.e5f2b478.svg\";","module.exports = __webpack_public_path__ + \"static/media/clouds.d0001cd6.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain.5cde9c93.svg\";","module.exports = __webpack_public_path__ + \"static/media/snow.546540b4.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport './Header.css';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\nimport logo from \"./logo.svg\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <Navbar className=\"custom-header\" expand=\"lg\">\r\n      <Navbar.Brand href={process.env.PUBLIC_URL + \"/\"}>\r\n        <img src={logo} alt=\"Weather Moods logo\" width=\"40\" height=\"40\"></img>\r\n        <Navbar.Text className=\"text-white ml-3\">Weather Moods</Navbar.Text>\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"ml-auto\">\r\n          <Nav.Link className=\"text-white\" href={process.env.PUBLIC_URL + \"/\"}>Home</Nav.Link>\r\n          <Nav.Link className=\"text-white\" href={process.env.PUBLIC_URL + \"/about\"}>About</Nav.Link>\r\n          <Nav.Link className=\"text-white\" href={process.env.PUBLIC_URL + \"/contact\"}>Contact</Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './SearchContainer.css';\r\nimport { Form, InputGroup } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst GENRES = [\r\n  'All Genres',\r\n  'Hip-Hop', \r\n  'Pop', \r\n  'Techno', \r\n  'R&B', \r\n  'Punk', \r\n  'Country', \r\n  'Indie', \r\n  'Latin', \r\n  'Jazz',\r\n  'Christian'\r\n];\r\n\r\nconst SearchContainer = ({ setGenre, setUserInput, handleSubmit }) => {\r\n  return (\r\n    <div className=\"search-container\">\r\n      <h1 className=\"text-white mb-5 text-center\">Need music based on the weather?</h1>\r\n      <Form onSubmit={(event) => handleSubmit(event)}>\r\n        <Form.Group>\r\n          <Form.Label className=\"text-white\">\r\n            1. Select your music genre\r\n          </Form.Label>\r\n          <Form.Control as=\"select\" onChange={(event) => setGenre(event.target.value)}>\r\n            {GENRES.map(genre => <option key={genre}>{genre}</option>)}\r\n          </Form.Control>\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Label className=\"text-white\">2. Enter your city</Form.Label>\r\n          <InputGroup onChange={(event) => setUserInput(event.target.value)}>\r\n            <Form.Control type=\"text\" placeholder=\"City\"></Form.Control>\r\n            <InputGroup.Append \r\n              onClick={(event) => handleSubmit(event)} \r\n              className=\"magnifying-glass-container\"\r\n            >\r\n              <InputGroup.Text>\r\n                <FontAwesomeIcon icon={faSearch} />\r\n              </InputGroup.Text>\r\n            </InputGroup.Append>\r\n          </InputGroup>\r\n        </Form.Group>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchContainer;","import React from 'react';\r\nimport './WeatherCard.css';\r\nimport { Card, Accordion, Button } from 'react-bootstrap';\r\nimport clear from './icons/clear.svg';\r\nimport clouds from './icons/clouds.svg';\r\nimport rain from './icons/rain.svg';\r\nimport snow from './icons/snow.svg';\r\nimport { faAngleDown } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst WeatherCard = (props) => {\r\n  const getIcon = () => {\r\n    switch(props.data.weather[0].main.toLowerCase()) {\r\n      case 'clear':\r\n        return clear;\r\n      case 'clouds':\r\n        return clouds;\r\n      case 'rain':\r\n        return rain;\r\n      case 'snow':\r\n        return snow;\r\n      default:\r\n        return clear;\r\n    }\r\n  }\r\n\r\n  const getDay = () => {\r\n    let d = new Date(props.data.dt * 1000);\r\n    switch (d.getDay()) {\r\n      case 0:\r\n        return 'Sun';\r\n      case 1:\r\n        return 'Mon';\r\n      case 2:\r\n        return 'Tue';\r\n      case 3:\r\n        return 'Wed';\r\n      case 4:\r\n        return 'Thu';\r\n      case 5:\r\n        return 'Fri';\r\n      case 6:\r\n        return 'Sat';\r\n      default:\r\n        return 'Error';\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Card className=\"col-md-1 col-sm-1\">\r\n      <Card.Title className=\"day\">{getDay()}</Card.Title>\r\n      <img \r\n        className=\"weather-icon\" \r\n        src={getIcon()} \r\n        alt={props.data.weather[0].main.toLowerCase()} \r\n        height=\"50\" \r\n        width=\"50\" \r\n      />\r\n      <div className=\"temp-container\">\r\n        <span className=\"temp-high\">{Math.round(props.data.temp.max)} &deg;F</span>\r\n        <span className=\"temp-low ml-2\">{Math.round(props.data.temp.min)} &deg;F</span>\r\n      </div>\r\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n        <FontAwesomeIcon className=\"arrow-down\" icon={faAngleDown} />\r\n      </Accordion.Toggle>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default WeatherCard;","import React from 'react';\r\nimport './WeatherContainer.css';\r\nimport { CardGroup, Accordion, Card } from 'react-bootstrap';\r\nimport WeatherCard from './WeatherCard/WeatherCard';\r\n\r\nconst WeatherContainer = (props) => {\r\n  return (\r\n    <Accordion>\r\n      <Card>\r\n        <Card.Header>\r\n          <h2 className=\"mt-3 text-center\">\r\n            Here's the seven day weather forecast for <span className=\"city\">{props.city}</span>:\r\n          </h2>\r\n          <CardGroup className=\"weather-container justify-content-center\">\r\n            {props.data.daily.slice(0, 7).map(day => <WeatherCard key={day.dt} data={day} />)}\r\n          </CardGroup>\r\n        </Card.Header>\r\n        <Accordion.Collapse eventKey=\"0\">\r\n          {/* This Card.Body will need to become its own component */}\r\n          <Card.Body>Hello! I'm the body</Card.Body>\r\n        </Accordion.Collapse>\r\n      </Card>\r\n    </Accordion>\r\n  );\r\n}\r\n\r\nexport default WeatherContainer;\r\n","import React from 'react';\r\nimport './Footer.css';\r\nimport { Navbar } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <Navbar \r\n      className=\"custom-footer justify-content-center\" \r\n      expand=\"lg\"\r\n      sticky=\"bottom\"\r\n    >\r\n      <Navbar.Text className=\"text-white\">\r\n        Made with <span className=\"heart\">&hearts;</span> by Sammy Tran\r\n        <a \r\n          href=\"https://github.com/sammytran277/weather-moods\" \r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <FontAwesomeIcon className=\"ml-2\" icon={faGithub} color=\"white\" />\r\n        </a>\r\n      </Navbar.Text>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React, { useState } from 'react';\r\nimport { Spinner } from 'react-bootstrap';\r\nimport './Home.css';\r\nimport Header from '../Header/Header';\r\nimport SearchContainer from './SearchContainer/SearchContainer';\r\nimport WeatherContainer from './WeatherContainer/WeatherContainer';\r\nimport Footer from '../Footer/Footer';\r\n\r\nconst Home = () => {\r\n  const [genre, setGenre] = useState(\"All Genres\");\r\n  const [city, setCity] = useState(\"\");\r\n  const [userInput, setUserInput] = useState(\"\");\r\n  const [weatherData, setWeatherData] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    setCity(userInput);\r\n    getApiData(genre, userInput);\r\n  }\r\n\r\n  const getApiData = (genre, city) => {\r\n    if (genre !== \"\" && city !== \"\") {\r\n      // Make all 3 API calls here, chaining them together\r\n      getWeatherData(city);\r\n    }\r\n  }\r\n\r\n  const getWeatherData = async (city) => {\r\n    setLoading(true);\r\n    const url = `https://weather-moods-api.herokuapp.com/api/weather/${city}`;\r\n    const data = await fetch(url)\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n      return;\r\n    });\r\n\r\n    console.log(data);\r\n    setWeatherData(data);\r\n  }\r\n\r\n  const renderWeatherContainer = () => {\r\n    if (weatherData !== null) {\r\n      return (\r\n        <WeatherContainer city={city} data={weatherData} />\r\n      );\r\n    } else if (loading) {\r\n      return (\r\n        <div className=\"loading\">\r\n          Getting your weather data...\r\n          <Spinner className=\"ml-3 loading-spinner\" animation=\"border\" />\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"loading\"></div>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <SearchContainer \r\n        setGenre={setGenre} \r\n        setUserInput={setUserInput}\r\n        handleSubmit={handleSubmit} \r\n      />\r\n      {renderWeatherContainer()}\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport './About.css';\r\nimport Header from '../Header/Header';\r\nimport Footer from '../Footer/Footer';\r\n\r\nconst About = () => {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <h1>ABOUT PAGE</h1>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nimport './Contact.css';\r\nimport Header from '../Header/Header';\r\nimport Footer from '../Footer/Footer';\r\n\r\nconst Contact = () => {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <h1>CONTACT</h1>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Contact;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Home from './Home/Home';\nimport About from './About/About';\nimport Contact from './Contact/Contact';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nReactDOM.render(\n  <Router basename={process.env.PUBLIC_URL}>\n    <Route exact path=\"/\" component={Home} />\n    <Route path=\"/about\" component={About} />\n    <Route path=\"/contact\" component={Contact} />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}