{"version":3,"sources":["serviceWorker.js","Header/Header.js","Footer/Footer.js","Home/Home.js","About/About.js","Contact/Contact.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","Footer","fixed","Text","Home","console","log","About","Contact","ReactDOM","render","basename","process","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yUAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCESC,EAhBA,WACb,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,KAAnB,mBACA,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,KAAf,QACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,UAAf,SACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,YAAf,eCDKQ,G,MARA,WACb,OACE,kBAACZ,EAAA,EAAD,CAAQU,UAAU,yBAAyBT,GAAG,QAAQC,OAAO,KAAKW,MAAM,UACtE,kBAACb,EAAA,EAAOc,KAAR,kBAAuB,0BAAMJ,UAAU,SAAhB,UAAvB,qBCSSK,EAXF,WAEX,OADAC,QAAQC,IAAI,oCAEV,6BACE,kBAAC,EAAD,MACA,oCACA,kBAAC,EAAD,QCISC,G,MAVD,WACZ,OACE,6BACE,kBAAC,EAAD,MACA,0CACA,kBAAC,EAAD,SCKSC,G,MAVC,WACd,OACE,6BACE,kBAAC,EAAD,MACA,uCACA,kBAAC,EAAD,S,eCDNC,IAASC,OACP,kBAAC,IAAD,CAAQC,SAAUC,kBAChB,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWX,IACjC,kBAAC,IAAD,CAAOU,KAAK,SAASC,UAAWR,IAChC,kBAAC,IAAD,CAAOO,KAAK,WAAWC,UAAWP,KAEpCQ,SAASC,eAAe,SNoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.cd8da0ce.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport './Header.css';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <Navbar bg=\"light\" expand=\"lg\">\r\n      <Navbar.Brand href=\"/\">React-Bootstrap</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"ml-auto\">\r\n          <Nav.Link href=\"/\">Home</Nav.Link>\r\n          <Nav.Link href=\"/about\">About</Nav.Link>\r\n          <Nav.Link href=\"/contact\">Contact</Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './Footer.css';\r\nimport { Navbar } from 'react-bootstrap';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <Navbar className=\"justify-content-center\" bg=\"light\" expand=\"lg\" fixed=\"bottom\">\r\n      <Navbar.Text>Made with <span className=\"heart\">&hearts;</span> by Sammy Tran</Navbar.Text>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport './Home.css';\r\nimport Header from '../Header/Header';\r\nimport Footer from '../Footer/Footer';\r\n\r\nconst Home = () => {\r\n  console.log(\"Your base url is: \" + process.env.PUBLIC_URL);\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <h1>HOME</h1>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport './About.css';\r\nimport Header from '../Header/Header';\r\nimport Footer from '../Footer/Footer';\r\n\r\nconst About = () => {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <h1>ABOUT PAGE</h1>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nimport './Contact.css';\r\nimport Header from '../Header/Header';\r\nimport Footer from '../Footer/Footer';\r\n\r\nconst Contact = () => {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <h1>CONTACT</h1>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Contact;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Home from './Home/Home';\nimport About from './About/About';\nimport Contact from './Contact/Contact';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nReactDOM.render(\n  <Router basename={process.env.PUBLIC_URL}>\n    <Route exact path=\"/\" component={Home} />\n    <Route path=\"/about\" component={About} />\n    <Route path=\"/contact\" component={Contact} />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}